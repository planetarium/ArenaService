// <auto-generated />
using System;
using System.Collections.Generic;
using ArenaService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArenaService.Migrations
{
    [DbContext(typeof(ArenaDbContext))]
    partial class ArenaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArenaService.Models.AvailableOpponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<int?>("BattleLogId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_log_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("OpponentAvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("opponent_avatar_address");

                    b.Property<int>("RefreshRequestId")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_request_id");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_available_opponents");

                    b.HasIndex("BattleLogId")
                        .HasDatabaseName("ix_available_opponents_battle_log_id");

                    b.HasIndex("RefreshRequestId")
                        .HasDatabaseName("ix_available_opponents_refresh_request_id");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_available_opponents_round_id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_available_opponents_season_id");

                    b.HasIndex("AvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_available_opponents_avatar_address_season_id");

                    b.HasIndex("OpponentAvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_available_opponents_opponent_avatar_address_season_id");

                    b.ToTable("available_opponents", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.BattleLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackerAvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("attacker_avatar_address");

                    b.Property<long?>("BattleBlockIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("battle_block_index");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("DefenderAvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("defender_avatar_address");

                    b.Property<bool?>("IsVictory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_victory");

                    b.Property<int?>("OpponentScoreChange")
                        .HasColumnType("integer")
                        .HasColumnName("opponent_score_change");

                    b.Property<int?>("ParticipantScoreChange")
                        .HasColumnType("integer")
                        .HasColumnName("participant_score_change");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("TxId")
                        .HasColumnType("text")
                        .HasColumnName("tx_id");

                    b.Property<int?>("TxStatus")
                        .HasColumnType("integer")
                        .HasColumnName("tx_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_battle_logs");

                    b.HasIndex("AttackerAvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_battle_logs_attacker_avatar_address_season_id");

                    b.HasIndex("DefenderAvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_battle_logs_defender_avatar_address_season_id");

                    b.ToTable("battle_logs", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.Participant", b =>
                {
                    b.Property<string>("AvatarAddress")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("InitializedScore")
                        .HasColumnType("integer")
                        .HasColumnName("initialized_score");

                    b.Property<int?>("LastRefreshRequestId")
                        .HasColumnType("integer")
                        .HasColumnName("last_refresh_request_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("AvatarAddress", "SeasonId")
                        .HasName("pk_participants");

                    b.HasIndex("LastRefreshRequestId")
                        .HasDatabaseName("ix_participants_last_refresh_request_id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_participants_season_id");

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.RefreshPriceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("policy_id");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<int>("RefreshOrder")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_order");

                    b.HasKey("Id")
                        .HasName("pk_refresh_price_details");

                    b.HasIndex("PolicyId")
                        .HasDatabaseName("ix_refresh_price_details_policy_id");

                    b.ToTable("refresh_price_details", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.RefreshPricePolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_refresh_price_policies");

                    b.ToTable("refresh_price_policies", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.RefreshRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsCostPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cost_paid");

                    b.Property<int>("RefreshPriceDetailId")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_price_detail_id");

                    b.Property<int>("RefreshStatus")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_status");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<List<string>>("SpecifiedOpponentAvatarAddresses")
                        .HasColumnType("text[]")
                        .HasColumnName("specified_avatar_addresses");

                    b.Property<string>("TxId")
                        .HasColumnType("text")
                        .HasColumnName("tx_id");

                    b.Property<int?>("TxStatus")
                        .HasColumnType("integer")
                        .HasColumnName("tx_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_refresh_requests");

                    b.HasIndex("RefreshPriceDetailId")
                        .HasDatabaseName("ix_refresh_requests_refresh_price_detail_id");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_refresh_requests_round_id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_refresh_requests_season_id");

                    b.ToTable("refresh_requests", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<long>("EndBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("end_block");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<long>("StartBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("start_block");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_rounds");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_rounds_season_id");

                    b.ToTable("rounds", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<long>("EndBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("end_block");

                    b.Property<int>("PricePolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("price_policy_id");

                    b.Property<int>("RoundInterval")
                        .HasColumnType("integer")
                        .HasColumnName("round_interval");

                    b.Property<long>("StartBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("start_block");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<int>("arenaType")
                        .HasColumnType("integer")
                        .HasColumnName("arena_type");

                    b.HasKey("Id")
                        .HasName("pk_seasons");

                    b.HasIndex("PricePolicyId")
                        .HasDatabaseName("ix_seasons_price_policy_id");

                    b.ToTable("seasons", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.User", b =>
                {
                    b.Property<string>("AvatarAddress")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<string>("AgentAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("agent_address");

                    b.Property<long>("Cp")
                        .HasColumnType("bigint")
                        .HasColumnName("cp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("NameWithHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_with_hash");

                    b.Property<int>("PortraitId")
                        .HasColumnType("integer")
                        .HasColumnName("portrait_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("AvatarAddress")
                        .HasName("pk_users");

                    b.HasIndex("AgentAddress")
                        .IsUnique()
                        .HasDatabaseName("ix_users_agent_address");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ArenaService.Views.RefreshPriceMaterializedView", b =>
                {
                    b.Property<int>("DetailId")
                        .HasColumnType("integer")
                        .HasColumnName("detail_id");

                    b.Property<int>("PolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("policy_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("RefreshOrder")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_order");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.ToTable((string)null);

                    b.ToView("refresh_price_view", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.AvailableOpponent", b =>
                {
                    b.HasOne("ArenaService.Models.BattleLog", "BattleLog")
                        .WithMany()
                        .HasForeignKey("BattleLogId")
                        .HasConstraintName("fk_available_opponents_battle_logs_battle_log_id");

                    b.HasOne("ArenaService.Models.RefreshRequest", "RefreshRequest")
                        .WithMany("AvailableOpponents")
                        .HasForeignKey("RefreshRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_refresh_requests_refresh_request_id");

                    b.HasOne("ArenaService.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_rounds_round_id");

                    b.HasOne("ArenaService.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_seasons_season_id");

                    b.HasOne("ArenaService.Models.Participant", "MyParticipant")
                        .WithMany()
                        .HasForeignKey("AvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_participants_avatar_address_season_id");

                    b.HasOne("ArenaService.Models.Participant", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentAvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_participants_opponent_avatar_address_se");

                    b.Navigation("BattleLog");

                    b.Navigation("MyParticipant");

                    b.Navigation("Opponent");

                    b.Navigation("RefreshRequest");

                    b.Navigation("Round");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Models.BattleLog", b =>
                {
                    b.HasOne("ArenaService.Models.Participant", "Attacker")
                        .WithMany()
                        .HasForeignKey("AttackerAvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_logs_participants_attacker_avatar_address_season_id");

                    b.HasOne("ArenaService.Models.Participant", "Defender")
                        .WithMany()
                        .HasForeignKey("DefenderAvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_logs_participants_defender_avatar_address_season_id");

                    b.Navigation("Attacker");

                    b.Navigation("Defender");
                });

            modelBuilder.Entity("ArenaService.Models.Participant", b =>
                {
                    b.HasOne("ArenaService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AvatarAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participants_users_avatar_address");

                    b.HasOne("ArenaService.Models.RefreshRequest", "RefreshRequest")
                        .WithMany()
                        .HasForeignKey("LastRefreshRequestId")
                        .HasConstraintName("fk_participants_refresh_requests_last_refresh_request_id");

                    b.HasOne("ArenaService.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participants_seasons_season_id");

                    b.Navigation("RefreshRequest");

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArenaService.Models.RefreshPriceDetail", b =>
                {
                    b.HasOne("ArenaService.Models.RefreshPricePolicy", "Policy")
                        .WithMany("RefreshPrices")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_price_details_refresh_price_policies_policy_id");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("ArenaService.Models.RefreshRequest", b =>
                {
                    b.HasOne("ArenaService.Models.RefreshPriceDetail", "RefreshPriceDetail")
                        .WithMany()
                        .HasForeignKey("RefreshPriceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_requests_refresh_price_details_refresh_price_detail");

                    b.HasOne("ArenaService.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_requests_rounds_round_id");

                    b.HasOne("ArenaService.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_requests_seasons_season_id");

                    b.Navigation("RefreshPriceDetail");

                    b.Navigation("Round");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Models.Round", b =>
                {
                    b.HasOne("ArenaService.Models.Season", "Season")
                        .WithMany("Rounds")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rounds_seasons_season_id");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Models.Season", b =>
                {
                    b.HasOne("ArenaService.Models.RefreshPricePolicy", "PricePolicy")
                        .WithMany()
                        .HasForeignKey("PricePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seasons_refresh_price_policies_price_policy_id");

                    b.Navigation("PricePolicy");
                });

            modelBuilder.Entity("ArenaService.Models.RefreshPricePolicy", b =>
                {
                    b.Navigation("RefreshPrices");
                });

            modelBuilder.Entity("ArenaService.Models.RefreshRequest", b =>
                {
                    b.Navigation("AvailableOpponents");
                });

            modelBuilder.Entity("ArenaService.Models.Season", b =>
                {
                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
