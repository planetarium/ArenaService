// <auto-generated />
using System;
using System.Collections.Generic;
using ArenaService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArenaService.Migrations
{
    [DbContext(typeof(ArenaDbContext))]
    [Migration("20250109062547_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArenaService.Models.ArenaInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("EndBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("end_block");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<long>("StartBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("start_block");

                    b.HasKey("Id")
                        .HasName("pk_arena_interval");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_arena_interval_season_id");

                    b.ToTable("arena_interval", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.AvailableOpponent", b =>
                {
                    b.Property<string>("ParticipantAvatarAddress")
                        .HasColumnType("text")
                        .HasColumnName("participant_avatar_address");

                    b.Property<int>("IntervalId")
                        .HasColumnType("integer")
                        .HasColumnName("interval_id");

                    b.Property<string>("CostPaid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cost_paid");

                    b.Property<List<string>>("OpponentAvatarAddresses")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("opponent_avatar_addresses");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<int>("updateSource")
                        .HasColumnType("integer")
                        .HasColumnName("update_source");

                    b.HasKey("ParticipantAvatarAddress", "IntervalId")
                        .HasName("pk_available_opponents");

                    b.HasIndex("IntervalId")
                        .HasDatabaseName("ix_available_opponents_interval_id");

                    b.HasIndex("ParticipantAvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_available_opponents_participant_avatar_address_season_id");

                    b.ToTable("available_opponents", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.BattleLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackerAvatarAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("attacker_avatar_address");

                    b.Property<long?>("BattleBlockIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("battle_block_index");

                    b.Property<string>("DefenderAvatarAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("defender_avatar_address");

                    b.Property<bool?>("IsVictory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_victory");

                    b.Property<int?>("OpponentScoreChange")
                        .HasColumnType("integer")
                        .HasColumnName("opponent_score_change");

                    b.Property<int?>("ParticipantScoreChange")
                        .HasColumnType("integer")
                        .HasColumnName("participant_score_change");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("pk_battle_logs");

                    b.HasIndex("AttackerAvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_battle_logs_attacker_avatar_address_season_id");

                    b.HasIndex("DefenderAvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_battle_logs_defender_avatar_address_season_id");

                    b.ToTable("battle_logs", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.Participant", b =>
                {
                    b.Property<string>("AvatarAddress")
                        .HasColumnType("text")
                        .HasColumnName("avatar_address");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<int>("InitializedScore")
                        .HasColumnType("integer")
                        .HasColumnName("initialized_score");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.HasKey("AvatarAddress", "SeasonId")
                        .HasName("pk_participants");

                    b.HasIndex("AvatarAddress")
                        .HasDatabaseName("ix_participants_avatar_address");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_participants_season_id");

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("EndBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("end_block");

                    b.Property<int>("Interval")
                        .HasColumnType("integer")
                        .HasColumnName("interval");

                    b.Property<long>("StartBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("start_block");

                    b.HasKey("Id")
                        .HasName("pk_seasons");

                    b.ToTable("seasons", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.User", b =>
                {
                    b.Property<string>("AvatarAddress")
                        .HasColumnType("text")
                        .HasColumnName("avatar_address");

                    b.Property<string>("AgentAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("agent_address");

                    b.Property<long>("Cp")
                        .HasColumnType("bigint")
                        .HasColumnName("cp");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("NameWithHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_with_hash");

                    b.Property<int>("PortraitId")
                        .HasColumnType("integer")
                        .HasColumnName("portrait_id");

                    b.HasKey("AvatarAddress")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ArenaService.Models.ArenaInterval", b =>
                {
                    b.HasOne("ArenaService.Models.Season", "Season")
                        .WithMany("ArenaIntervals")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_arena_interval_seasons_season_id");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Models.AvailableOpponent", b =>
                {
                    b.HasOne("ArenaService.Models.ArenaInterval", "ArenaInterval")
                        .WithMany()
                        .HasForeignKey("IntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_arena_interval_interval_id");

                    b.HasOne("ArenaService.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantAvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_participants_participant_avatar_address");

                    b.Navigation("ArenaInterval");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("ArenaService.Models.BattleLog", b =>
                {
                    b.HasOne("ArenaService.Models.Participant", "Attacker")
                        .WithMany()
                        .HasForeignKey("AttackerAvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_logs_participants_attacker_avatar_address_season_id");

                    b.HasOne("ArenaService.Models.Participant", "Defender")
                        .WithMany()
                        .HasForeignKey("DefenderAvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_logs_participants_defender_avatar_address_season_id");

                    b.Navigation("Attacker");

                    b.Navigation("Defender");
                });

            modelBuilder.Entity("ArenaService.Models.Participant", b =>
                {
                    b.HasOne("ArenaService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AvatarAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participants_users_avatar_address");

                    b.HasOne("ArenaService.Models.Season", "Season")
                        .WithMany("Participants")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participants_seasons_season_id");

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArenaService.Models.Season", b =>
                {
                    b.Navigation("ArenaIntervals");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
