@page "/manage-seasons"
@using ArenaService.Shared.Repositories
@using ArenaService.Shared.Services
@using ArenaService.Shared.Models
@using Microsoft.EntityFrameworkCore
@inject ISeasonRepository SeasonRepo
@inject ISeasonCacheRepository SeasonCacheRepo
@inject IRankingRepository RankingRepo
@inject IRoundRepository RoundRepo
@inject ISeasonPreparationService SeasonPreparationService
@inject IRoundPreparationService RoundPreparationService
@inject NavigationManager NavigationManager

<h3>🏆 시즌 관리</h3>

<!-- 진행 중인 시즌 정보 -->
<h4>📅 현재 진행 중인 시즌</h4>
@if (currentSeason != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>시작 블록</th>
                <th>종료 블록</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@currentSeason?.Id</td>
                <td>@currentSeason?.StartBlock</td>
                <td>@currentSeason?.EndBlock</td>
            </tr>
        </tbody>
    </table>

    <h4>📅 현재 진행 중인 라운드</h4>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>시작 블록</th>
                <th>종료 블록</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@currentRound?.Id</td>
                <td>@currentRound?.StartBlock</td>
                <td>@currentRound?.EndBlock</td>
            </tr>
        </tbody>
    </table>

    <h4>📊 랭킹 데이터 존재 여부</h4>
    <table class="table">
        <thead>
            <tr>
                <th>라운드</th>
                <th>랭킹 데이터 개수</th>
                <th>상태</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var roundRanking in rankingCounts)
            {
                <tr>
                    <td>@roundRanking.RoundOffset</td>
                    <td>@roundRanking.RankingCount</td>
                    <td>@(roundRanking.RankingCount > 0 ? "✅ 준비됨" : "❌ 미완료")</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>⚠️ 현재 진행 중인 시즌이 없습니다.</p>
}

<hr />

<!-- 시즌 초기화 -->
<div class="form-group">
    <label for="seasonId">시즌 ID:</label>
    <input id="seasonId" class="form-control" @bind="seasonId" type="number" />
</div>

<button class="btn btn-primary" @onclick="InitializeSeason">시즌 초기화</button>

@if (seasonMessage is not null)
{
    <p class="text-info">@seasonMessage</p>
}

<hr />

<!-- 라운드 준비 -->
<div class="form-group">
    <label for="roundId">(진행중인 라운드와 +1한 라운드를 준비하는겁니다. 예를들어 42라운드가 진행중인데 43라운드가 준비되어있지 않다면 42라운드를 입력해주세요.) 라운드
        ID:</label>
    <input id="roundId" class="form-control" @bind="roundId" type="number" />
</div>

<button class="btn btn-success" @onclick="PrepareNextRound">라운드 준비</button>

@if (roundMessage is not null)
{
    <p class="text-info">@roundMessage</p>
}

@code {
    private (int Id, long StartBlock, long EndBlock)? currentSeason;
    private (int Id, long StartBlock, long EndBlock)? currentRound;
    private List<(int RoundOffset, int RankingCount)> rankingCounts = new();
    private int seasonId;
    private int roundId;
    private string? seasonMessage;
    private string? roundMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentSeason = await SeasonCacheRepo.GetSeasonAsync();
            currentRound = await SeasonCacheRepo.GetRoundAsync();

            if (currentSeason.HasValue && currentRound.HasValue)
            {
                await LoadRankingCounts(currentSeason.Value.Id, currentRound.Value.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️ 진행 중인 시즌 정보를 불러오는 중 오류 발생: {ex.Message}");
        }
    }

    private async Task LoadRankingCounts(int seasonId, int currentRoundId)
    {
        rankingCounts.Clear();

        for (int offset = -1; offset <= 2; offset++)
        {
            int roundToCheck = currentRoundId + offset;
            int rankingCount = await RankingRepo.GetRankingCountAsync(seasonId, roundToCheck);
            rankingCounts.Add((currentRoundId + offset, rankingCount));
        }
    }

    private async Task InitializeSeason()
    {
        seasonMessage = "시즌 초기화 중...";
        try
        {
            var season = await SeasonRepo.GetSeasonAsync(seasonId, q => q.Include(s => s.Rounds));

            if (season == null)
            {
                seasonMessage = "❌ 시즌을 찾을 수 없습니다.";
                return;
            }

            var firstRound = season.Rounds.OrderBy(r => r.StartBlock).FirstOrDefault();

            if (firstRound == null)
            {
                seasonMessage = "⚠️ 해당 시즌에 라운드가 없습니다.";
                return;
            }

            await SeasonPreparationService.PrepareSeasonAsync((season, firstRound));

            seasonMessage = "✅ 시즌 초기화 완료!";
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            seasonMessage = $"❌ 오류 발생: {ex.Message}";
        }
    }

    private async Task PrepareNextRound()
    {
        roundMessage = "라운드 준비 중...";
        try
        {
            var round = await RoundRepo.GetRoundAsync(roundId, q => q.Include(r => r.Season));
            var season = await SeasonRepo.GetSeasonAsync(round!.SeasonId, q => q.Include(s => s.Rounds));

            if (round == null || round.Season == null)
            {
                roundMessage = "❌ 라운드를 찾을 수 없습니다.";
                return;
            }

            await RoundPreparationService.PrepareNextRoundWithSnapshotAsync((season, round));

            roundMessage = "✅ 다음 라운드 준비 완료!";
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            roundMessage = $"❌ 오류 발생: {ex.Message}";
        }
    }
}
