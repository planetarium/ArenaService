@page "/policy"
@using ArenaService.Shared.Models.BattleTicket
@using ArenaService.Shared.Models.RefreshTicket
@using ArenaService.Shared.Repositories
@inject IBattleTicketPolicyRepository BattlePolicyRepo
@inject IRefreshTicketPolicyRepository RefreshPolicyRepo

<h3>🎟️ 티켓 정책 관리</h3>

<!-- 배틀 티켓 정책 목록 -->
<h4>⚔️ 배틀 티켓 정책</h4>
@if (battlePolicies == null)
{
    <p>로딩 중...</p>
}
else if (!battlePolicies.Any())
{
    <p>등록된 배틀 티켓 정책이 없습니다.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>이름</th>
                <th>라운드 별 기본 지급 티켓</th>
                <th>라운드 별 최대 구매 가능 티켓</th>
                <th>시즌 별 최대 구매 가능 티켓</th>
                <th>구매 가격</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var policy in battlePolicies)
            {
                <tr>
                    <td>@policy.Id</td>
                    <td>@policy.Name</td>
                    <td>@policy.DefaultTicketsPerRound</td>
                    <td>@policy.MaxPurchasableTicketsPerRound</td>
                    <td>@policy.MaxPurchasableTicketsPerSeason</td>
                    <td>@string.Join(", ", policy.PurchasePrices)</td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- 리프레시 티켓 정책 목록 -->
<h4>🔄 리프레시 티켓 정책</h4>
@if (refreshPolicies == null)
{
    <p>로딩 중...</p>
}
else if (!refreshPolicies.Any())
{
    <p>등록된 리프레시 티켓 정책이 없습니다.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>이름</th>
                <th>라운드 별 기본 지급 티켓</th>
                <th>라운드 별 최대 구매 가능 티켓</th>
                <th>구매 가격</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var policy in refreshPolicies)
            {
                <tr>
                    <td>@policy.Id</td>
                    <td>@policy.Name</td>
                    <td>@policy.DefaultTicketsPerRound</td>
                    <td>@policy.MaxPurchasableTicketsPerRound</td>
                    <td>@string.Join(", ", policy.PurchasePrices)</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<!-- 새로운 폴리시 추가 -->
<h4>🆕 새 정책 추가</h4>
<div class="form-group">
    <label>이름:</label>
    <input class="form-control" @bind="newPolicyName" />
</div>
<div class="form-group">
    <label>라운드 별 기본 지급 티켓:</label>
    <input class="form-control" type="number" @bind="newDefaultTickets" />
</div>
<div class="form-group">
    <label>라운드 별 최대 구매 가능 티켓:</label>
    <input class="form-control" type="number" @bind="newMaxPurchasableTicketsPerRound" />
</div>
<div class="form-group">
    <label>시즌 별 최대 구매 가능 티켓 (리프레시 티켓일 경우 무시됩니다.):</label>
    <input class="form-control" type="number" @bind="newMaxPurchasableTicketsPerSeason" />
</div>

<!-- 구매 가격 설정 -->
<h5>💰 구매 가격 설정</h5>
<div class="form-group">
    <label>초기 가격:</label>
    <input class="form-control" type="number" step="0.1" @bind="initialPrice" />
</div>
<div class="form-group">
    <label>가격 증가 값:</label>
    <input class="form-control" type="number" step="0.1" @bind="priceStep" />
</div>

<!-- 배틀 티켓용 자동 생성 버튼 -->
<button class="btn btn-secondary" @onclick="GenerateBattlePrices">⚔️ 배틀 티켓 가격 자동 생성</button>

<!-- 리프레시 티켓용 자동 생성 버튼 -->
<button class="btn btn-secondary" @onclick="GenerateRefreshPrices">🔄 리프레시 티켓 가격 자동 생성</button>

<!-- 직접 입력 가능 -->
<div class="form-group">
    <label>구매 가격 리스트:</label>
    <textarea class="form-control" @bind="manualPrices"></textarea>
</div>

<button class="btn btn-primary" @onclick="AddBattlePolicy">⚔️ 배틀 티켓 정책 추가</button>
<button class="btn btn-success" @onclick="AddRefreshPolicy">🔄 리프레시 티켓 정책 추가</button>

@if (message is not null)
{
    <p class="text-info">@message</p>
}

@code {
    private List<BattleTicketPolicy>? battlePolicies;
    private List<RefreshTicketPolicy>? refreshPolicies;
    private string newPolicyName = "";
    private int newDefaultTickets;
    private int newMaxPurchasableTicketsPerRound;
    private int newMaxPurchasableTicketsPerSeason;
    private string? message;

    private decimal initialPrice = 1.0m;
    private decimal priceStep = 0.1m;
    private string manualPrices = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPolicies();
    }

    private async Task LoadPolicies()
    {
        battlePolicies = await BattlePolicyRepo.GetAllBattlePoliciesAsync();
        refreshPolicies = await RefreshPolicyRepo.GetAllRefreshPoliciesAsync();
    }

    private async Task AddBattlePolicy()
    {
        var prices = ParsePrices(newMaxPurchasableTicketsPerSeason);
        var policy = new BattleTicketPolicy
        {
            Name = newPolicyName,
            DefaultTicketsPerRound = newDefaultTickets,
            MaxPurchasableTicketsPerRound = newMaxPurchasableTicketsPerRound,
            MaxPurchasableTicketsPerSeason = newMaxPurchasableTicketsPerSeason,
            PurchasePrices = prices
        };

        await BattlePolicyRepo.AddBattlePolicyAsync(policy);
        message = "✅ 배틀 티켓 정책이 추가되었습니다!";
        await LoadPolicies();
    }

    private async Task AddRefreshPolicy()
    {
        var prices = ParsePrices(newMaxPurchasableTicketsPerRound);
        var policy = new RefreshTicketPolicy
        {
            Name = newPolicyName,
            DefaultTicketsPerRound = newDefaultTickets,
            MaxPurchasableTicketsPerRound = newMaxPurchasableTicketsPerRound,
            PurchasePrices = prices
        };

        await RefreshPolicyRepo.AddRefreshPolicyAsync(policy);
        message = "✅ 리프레시 티켓 정책이 추가되었습니다!";
        await LoadPolicies();
    }

    private void GenerateBattlePrices()
    {
        var prices = GenerateSequence(newMaxPurchasableTicketsPerSeason, initialPrice, priceStep);
        manualPrices = string.Join(", ", prices);
    }

    private void GenerateRefreshPrices()
    {
        var prices = GenerateSequence(newMaxPurchasableTicketsPerRound, initialPrice, priceStep);
        manualPrices = string.Join(", ", prices);
    }

    private List<decimal> ParsePrices(int length)
    {
        return manualPrices.Split(',')
            .Select(p => decimal.TryParse(p.Trim(), out var result) ? result : (decimal?)null)
            .Where(p => p.HasValue)
            .Select(p => p!.Value)
            .ToList();
    }

    private List<decimal> GenerateSequence(int length, decimal start, decimal step)
    {
        return Enumerable.Range(0, length)
            .Select(i => Math.Round(start + step * i, 1))
            .ToList();
    }
}
