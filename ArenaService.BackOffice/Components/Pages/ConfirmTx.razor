@page "/confirm-tx"
@using Microsoft.AspNetCore.Authorization
@using ArenaService.Shared.Models.Ticket
@using ArenaService.Shared.Repositories
@using ArenaService.Shared.Models.BattleTicket
@using ArenaService.Shared.Models.Enums
@using ArenaService.Shared.Models
@attribute [Authorize]
@rendermode InteractiveServer
@inject ITicketRepository TicketRepo
@inject IBattleRepository BattleRepo

<h3>🔍 검토할 트랜잭션</h3>

@if (loading)
{
    <p>데이터 로딩 중...</p>
}
else
{
    <h4>⚔️ 검토할 배틀 트랜잭션</h4>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Avatar Address</th>
                <th>Season ID</th>
                <th>Round ID</th>
                <th>Tx ID</th>
                <th>Tx Status</th>
                <th>Battle Status</th>
                <th>Exception Names</th>
                <th>Reviewed</th>
                <th>액션</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var battle in battlesToReview)
            {
                <tr>
                    <td>@battle.Id</td>
                    <td>@battle.AvatarAddress</td>
                    <td>@battle.SeasonId</td>
                    <td>@battle.RoundId</td>
                    <td>@battle.TxId</td>
                    <td>@battle.TxStatus</td>
                    <td>@battle.BattleStatus</td>
                    <td>@battle.ExceptionNames</td>
                    <td>@(battle.Reviewed?.ToString() ?? "❌")</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => MarkBattleAsReviewed(battle.Id)">
                            검토 완료
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>🎟️ 검토할 티켓 구매 트랜잭션</h4>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Avatar Address</th>
                <th>Season ID</th>
                <th>Round ID</th>
                <th>Tx ID</th>
                <th>Tx Status</th>
                <th>Purchase Status</th>
                <th>Reviewed</th>
                <th>Exception Names</th>
                <th>액션</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in ticketPurchasesToReview)
            {
                <tr>
                    <td>@ticket.Id</td>
                    <td>@ticket.AvatarAddress</td>
                    <td>@ticket.SeasonId</td>
                    <td>@ticket.RoundId</td>
                    <td>@ticket.TxId</td>
                    <td>@ticket.TxStatus</td>
                    <td>@ticket.PurchaseStatus</td>
                    <td>@ticket.ExceptionNames</td>
                    <td>@(ticket.Reviewed?.ToString() ?? "❌")</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => MarkTicketAsReviewed(ticket.Id)">
                            검토 완료
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Battle> battlesToReview = new();
    private List<TicketPurchaseLog> ticketPurchasesToReview = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            battlesToReview = await BattleRepo.GetUnReviewedBattlesAsync();
            ticketPurchasesToReview = (await TicketRepo.GetUnReviewedBattleTicketPurchasesAsync())
            .Cast<TicketPurchaseLog>()
            .Concat(await TicketRepo.GetUnReviewedRefreshTicketPurchasesAsync())
            .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ 데이터 로딩 오류: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task MarkBattleAsReviewed(int battleId)
    {
        try
        {
            await BattleRepo.UpdateBattle(battleId, battle => battle.Reviewed = true);
            battlesToReview.RemoveAll(b => b.Id == battleId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ 배틀 검토 오류: {ex.Message}");
        }
    }

    private async Task MarkTicketAsReviewed(int purchaseLogId)
    {
        try
        {
            await TicketRepo.UpdateBattleTicketPurchaseLog(purchaseLogId, log => log.Reviewed = true);
            ticketPurchasesToReview.RemoveAll(tp => tp.Id == purchaseLogId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ 티켓 구매 검토 오류: {ex.Message}");
        }
    }
}
