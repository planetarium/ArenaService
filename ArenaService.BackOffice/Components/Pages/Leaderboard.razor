@page "/leaderboard"
@using ArenaService.Shared.Constants
@using Microsoft.AspNetCore.Authorization
@using ArenaService.Shared.Models
@using ArenaService.Shared.Repositories
@using Microsoft.JSInterop
@using ArenaService.Client
@using Libplanet.Crypto
@using Bencodex
@using Bencodex.Types
@using ArenaService.Shared.Extensions
@using System.Text
@using ArenaService.Options
@using Microsoft.Extensions.Options
@attribute [Authorize]
@rendermode InteractiveServer
@inject ILeaderboardRepository LeaderboardRepository
@inject ISeasonRepository SeasonRepository
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IHeadlessClient HeadlessClient
@inject IOptions<HeadlessOptions> HeadlessOptions

<h3>🏆 리더보드</h3>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="form-group">
            <label>시즌 선택:</label>
            <select class="form-control" @bind="selectedSeasonId" @bind:after="LoadLeaderboard">
                @foreach (var season in seasons)
                {
                    <option value="@season.Id">@season.SeasonGroupId 시즌 - @season.StartBlock ~ @season.EndBlock -
                        @season.ArenaType (pk: @season.Id)</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-6 d-flex align-items-end justify-content-end">
        <div class="btn-group">
            <button class="btn btn-primary" @onclick="DownloadCsv" disabled="@loading">
                <i class="bi bi-download me-1"></i> CSV 다운로드
            </button>
            <button class="btn btn-success" @onclick="DownloadStakingCsv" disabled="@loading">
                <i class="bi bi-download me-1"></i> 스테이킹 정보 다운로드
            </button>
        </div>
    </div>
</div>

@if (loading)
{
    <p>로딩 중...</p>
}
else if (leaderboard.Count == 0)
{
    <p>해당 시즌의 데이터가 없습니다.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>순위</th>
                <th>Avatar 주소</th>
                <th>Agent 주소</th>
                <th>이름</th>
                <th>점수</th>
                <th>총 승리</th>
                <th>총 패배</th>
                <th>레벨</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in leaderboard)
            {
                <tr>
                    <td>@item.Rank</td>
                    <td>@item.Participant.User.AvatarAddress</td>
                    <td>@item.Participant.User.AgentAddress</td>
                    <td>@item.Participant.User.NameWithHash</td>
                    <td>@item.Score</td>
                    <td>@item.Participant.TotalWin</td>
                    <td>@item.Participant.TotalLose</td>
                    <td>@item.Participant.User.Level</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Season> seasons = new();
    private List<(Participant Participant, int Score, int Rank)> leaderboard = new();
    private int selectedSeasonId;
    private Season? selectedSeason = null;
    private bool loading = true;
    private string planet;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        planet = HeadlessOptions.Value.Planet;
        var result = await HeadlessClient.GetTipIndex.ExecuteAsync();
        var tipIndex = result.Data.NodeStatus.Tip.Index;
        seasons = (await SeasonRepository.GetAllSeasonsAsync())
            .Where(s => s.ArenaType != ArenaType.OFF_SEASON)
            .Where(s => s.EndBlock < tipIndex)
            .ToList();

        if (seasons.Any()) 
        {
            selectedSeasonId = seasons.Max(s => s.Id);
            selectedSeason = seasons.First(s => s.Id == selectedSeasonId);
            await LoadLeaderboard();
        }
        else
        {
            loading = false;
        }
    }

    private async Task LoadLeaderboard()
    {
        loading = true;
        leaderboard = await LeaderboardRepository.GetLeaderboardAsync(selectedSeasonId);
        selectedSeason = seasons.First(s => s.Id == selectedSeasonId);
        loading = false;
    }

    private async Task DownloadCsv()
    {
        loading = true;

        try
        {
            var csvData = await LeaderboardRepository.GenerateLeaderboardCsvAsync(selectedSeasonId);
            string fileName = $"{planet}_leaderboard_group_{selectedSeason.SeasonGroupId}_{selectedSeason.StartBlock}_{selectedSeason.EndBlock}.csv";
            string base64 = Convert.ToBase64String(csvData);

            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64, "text/csv");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"CSV 다운로드 오류: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task DownloadStakingCsv()
    {
        loading = true;

        try
        {
            var stakingData = await GetStakingDataAsync();
            string fileName = $"{planet}_staking_data_group_{selectedSeason.SeasonGroupId}_{selectedSeason.StartBlock}_{selectedSeason.EndBlock}.csv";
            string base64 = Convert.ToBase64String(stakingData);

            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64, "text/csv");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"스테이킹 데이터 다운로드 오류: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task<byte[]> GetStakingDataAsync()
    {
        StringBuilder csv = new StringBuilder();

        // CSV 헤더 추가
        csv.AppendLine("BlockIndex,StakeVersion,AgentAddress,StakingAmount,StartedBlockIndex,ReceivedBlockIndex,CancellableBlockIndex,TimeStamp");
        var totalCount = leaderboard.Count;
        var chunkSize = 100;
        var currentIndex = 0;

        while (currentIndex < totalCount)
        {
            var chunk = leaderboard.Skip(currentIndex).Take(chunkSize).ToList();
            var agentAddresses = chunk.Select(item => item.Participant.User.AgentAddress.ToHex().ToLower()).ToList();

            var result = await HeadlessClient.GetStakeState.ExecuteAsync(agentAddresses);

            foreach (var (index, stakeState) in result.Data.StateQuery.StakeStates.Select((stakeState, index) => (index, stakeState)))
            {
                if (stakeState is not null)
                {
                    var blockIndex = result.Data.NodeStatus.Tip.Index;
                    var stakeVersion = "V3";
                    var stakingAmount = stakeState.Deposit;
                    var agentAddress = "0x" + agentAddresses[index];
                    var startedBlockIndex = stakeState.StartedBlockIndex;
                    var receivedBlockIndex = stakeState.ReceivedBlockIndex;
                    var cancellableBlockIndex = stakeState.CancellableBlockIndex;
                    var timestamp = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss");

                    csv.AppendLine($"{blockIndex},{stakeVersion},{agentAddress},{stakingAmount},{startedBlockIndex},{receivedBlockIndex},{cancellableBlockIndex},{timestamp}");
                }
            }

            currentIndex += chunkSize;
        }

        return Encoding.UTF8.GetBytes(csv.ToString());
    }
}
