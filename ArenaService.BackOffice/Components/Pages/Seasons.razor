@page "/seasons"
@using Microsoft.AspNetCore.Authorization
@using ArenaService.Shared.Constants
@using ArenaService.Shared.Services
@using ArenaService.Shared.Models
@using ArenaService.Shared.Repositories
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@rendermode InteractiveServer
@inject ISeasonRepository SeasonRepository
@inject ISeasonCacheRepository SeasonCacheRepo
@inject NavigationManager NavigationManager

<h3>üèÜ Season List</h3>

@if (loading)
{
    <p>Loading...</p>
}
else
{
    <h4>üìÖ Season List</h4>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Season Group ID</th>
                <th>Start Block</th>
                <th>End Block</th>
                <th>Type</th>
                <th>Round Interval</th>
                <th>Required Medals</th>
                <th>Total Prize</th>
                <th>Battle Ticket Policy</th>
                <th>Refresh Ticket Policy</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var season in paginatedSeasons)
            {
                <tr>
                    <td>@season.Id</td>
                    <td>@season.SeasonGroupId</td>
                    <td>@season.StartBlock</td>
                    <td>@season.EndBlock</td>
                    <td>
                        @if (editingSeasonId == season.Id)
                        {
                            <select class="form-control form-control-sm" @bind="editingSeason.ArenaType">
                                @foreach (var type in Enum.GetValues<ArenaType>())
                                {
                                    <option value="@type">@type</option>
                                }
                            </select>
                        }
                        else
                        {
                            @season.ArenaType
                        }
                    </td>
                    <td>
                        @if (editingSeasonId == season.Id)
                        {
                            <input class="form-control form-control-sm" type="number" @bind="editingSeason.RoundInterval" />
                        }
                        else
                        {
                            @season.RoundInterval
                        }
                    </td>
                    <td>
                        @if (editingSeasonId == season.Id)
                        {
                            <input class="form-control form-control-sm" type="number" @bind="editingSeason.RequiredMedalCount" />
                        }
                        else
                        {
                            @season.RequiredMedalCount
                        }
                    </td>
                    <td>
                        @if (editingSeasonId == season.Id)
                        {
                            <input class="form-control form-control-sm" type="number" @bind="editingSeason.TotalPrize" />
                        }
                        else
                        {
                            @season.TotalPrize
                        }
                    </td>
                    <td>
                        @if (editingSeasonId == season.Id)
                        {
                            <input class="form-control form-control-sm" type="number" @bind="editingSeason.BattleTicketPolicyId" />
                        }
                        else
                        {
                            @season.BattleTicketPolicy.Name
                        }
                    </td>
                    <td>
                        @if (editingSeasonId == season.Id)
                        {
                            <input class="form-control form-control-sm" type="number" @bind="editingSeason.RefreshTicketPolicyId" />
                        }
                        else
                        {
                            @season.RefreshTicketPolicy.Name
                        }
                    </td>
                    <td>
                        @if (editingSeasonId == season.Id)
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => SaveSeason(season.Id)">Save</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-primary btn-sm" @onclick="() => StartEdit(season)">Edit</button>
                            <button class="btn btn-info btn-sm" @onclick="() => SelectSeason(season)">View Rounds</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(!CanGoPrevious)">Previous</button>
        <span>Page @(currentPage) / @totalPages</span>
        <button @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>
    </div>
}

@if (selectedSeason != null)
{
    <h4>üìã Selected Season's Round List</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Round ID</th>
                <th>Start Block</th>
                <th>End Block</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var round in rounds)
            {
                <tr>
                    <td>@round.Id</td>
                    <td>@round.StartBlock</td>
                    <td>@round.EndBlock</td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>üÜï Add New Season</h4>
<div class="form-group">
    <label>Season Start Block:</label>
    <input class="form-control" type="number" @bind="newStartBlock" />
</div>
<div class="form-group">
    <label>Round Interval:</label>
    <input class="form-control" type="number" @bind="newRoundInterval" />
</div>
<div class="form-group">
    <label>Total Number of Rounds:</label>
    <input class="form-control" type="number" @bind="newRoundCount" />
</div>
<div class="form-group">
    <label>Arena Type:</label>
    <select class="form-control" @bind="newArenaType">
        @foreach (var type in Enum.GetValues<ArenaType>())
        {
            <option value="@type">@type</option>
        }
    </select>
</div>
<div class="form-group">
    <label>Required Medal Count:</label>
    <input class="form-control" type="number" @bind="newRequiredMedalCount" />
</div>
<div class="form-group">
    <label>Total Prize:</label>
    <input class="form-control" type="number" @bind="newTotalPrize" />
</div>
<div class="form-group">
    <label>Battle Policy ID:</label>
    <input class="form-control" type="number" @bind="newBattlePolicyId" />
</div>
<div class="form-group">
    <label>Refresh Policy ID:</label>
    <input class="form-control" type="number" @bind="newRefreshPolicyId" />
</div>
<button class="btn btn-primary" @onclick="AddSeason">Add Season</button>

@if (message is not null)
{
    <p class="text-info">@message</p>
}

@code {
    private List<Season> paginatedSeasons = new();
    private List<Round> rounds = new();
    private Season? selectedSeason;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalSeasons = 0;
    private bool loading = true;

    private int newStartBlock;
    private int newRoundInterval;
    private int newRoundCount;
    private ArenaType newArenaType = ArenaType.SEASON;
    private int newRequiredMedalCount;
    private int newTotalPrize;
    private int newBattlePolicyId;
    private int newRefreshPolicyId;
    private string? message;

    private int editingSeasonId;
    private Season editingSeason = new();

    protected override async Task OnInitializedAsync()
    {
        newStartBlock = await SeasonRepository.GetLastSeasonEndBlockAsync() + 1 ?? 1;
        totalSeasons = await SeasonRepository.GetTotalSeasonsCountAsync();
        await LoadSeasons();
    }

    private async Task LoadSeasons()
    {
        loading = true;
        paginatedSeasons = await SeasonRepository.GetSeasonsPagedAsync(currentPage, pageSize, q => q.Include(s =>
        s.Rounds).Include(s => s.BattleTicketPolicy).Include(s => s.RefreshTicketPolicy));
        loading = false;
    }

    private async Task AddSeason()
    {
        try
        {
            await SeasonRepository.AddSeasonWithRoundsAsync(
            newStartBlock,
            newRoundInterval,
            newRoundCount,
            0,
            newArenaType,
            newRequiredMedalCount,
            newTotalPrize,
            newBattlePolicyId,
            newRefreshPolicyId
            );

            totalSeasons = await SeasonRepository.GetTotalSeasonsCountAsync();

            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            message = $"‚ùå Failed to add season: {ex.Message}";
        }
    }

    private async Task SelectSeason(Season season)
    {
        selectedSeason = season;
        rounds = season.Rounds.OrderBy(r => r.StartBlock).ToList();
    }

    private async Task NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
            await LoadSeasons();
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoPrevious)
        {
            currentPage--;
            await LoadSeasons();
        }
    }

    private int totalPages => (int)Math.Ceiling((double)totalSeasons / pageSize);
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;

    private void StartEdit(Season season)
    {
        editingSeasonId = season.Id;
        editingSeason = new Season
        {
            Id = season.Id,
            ArenaType = season.ArenaType,
            RoundInterval = season.RoundInterval,
            RequiredMedalCount = season.RequiredMedalCount,
            TotalPrize = season.TotalPrize,
            BattleTicketPolicyId = season.BattleTicketPolicyId,
            RefreshTicketPolicyId = season.RefreshTicketPolicyId
        };
    }

    private async Task SaveSeason(int seasonId)
    {
        try
        {
            await SeasonRepository.UpdateSeasonAsync(
                seasonId,
                editingSeason.ArenaType,
                editingSeason.RoundInterval,
                editingSeason.RequiredMedalCount,
                editingSeason.TotalPrize,
                editingSeason.BattleTicketPolicyId,
                editingSeason.RefreshTicketPolicyId
            );

            editingSeasonId = 0;
            message = "‚úÖ Season updated successfully!";
            await LoadSeasons();
        }
        catch (Exception ex)
        {
            message = $"‚ùå Failed to save season: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        editingSeasonId = 0;
        message = null;
    }
}
