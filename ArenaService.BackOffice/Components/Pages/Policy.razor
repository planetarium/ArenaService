@page "/policy"
@using Microsoft.AspNetCore.Authorization
@using ArenaService.Shared.Models.BattleTicket
@using ArenaService.Shared.Models.RefreshTicket
@using ArenaService.Shared.Repositories
@attribute [Authorize]
@rendermode InteractiveServer
@inject IBattleTicketPolicyRepository BattlePolicyRepo
@inject IRefreshTicketPolicyRepository RefreshPolicyRepo

<h3>üéüÔ∏è Ticket Policy Management</h3>

<!-- Battle Ticket Policies -->
<h4>‚öîÔ∏è Battle Ticket Policies</h4>
@if (battlePolicies == null)
{
    <p>Loading...</p>
}
else if (!battlePolicies.Any())
{
    <p>No registered battle ticket policies.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Default Tickets per Round</th>
                <th>Max Purchasable Tickets per Round</th>
                <th>Max Purchasable Tickets per Season</th>
                <th>Purchase Prices</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var policy in battlePolicies)
            {
                <tr>
                    <td>@policy.Id</td>
                    <td>@policy.Name</td>
                    <td>@policy.DefaultTicketsPerRound</td>
                    <td>@policy.MaxPurchasableTicketsPerRound</td>
                    <td>@policy.MaxPurchasableTicketsPerSeason</td>
                    <td>@string.Join(", ", policy.PurchasePrices)</td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Refresh Ticket Policies -->
<h4>üîÑ Refresh Ticket Policies</h4>
@if (refreshPolicies == null)
{
    <p>Loading...</p>
}
else if (!refreshPolicies.Any())
{
    <p>No registered refresh ticket policies.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Default Tickets per Round</th>
                <th>Max Purchasable Tickets per Round</th>
                <th>Purchase Prices</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var policy in refreshPolicies)
            {
                <tr>
                    <td>@policy.Id</td>
                    <td>@policy.Name</td>
                    <td>@policy.DefaultTicketsPerRound</td>
                    <td>@policy.MaxPurchasableTicketsPerRound</td>
                    <td>@string.Join(", ", policy.PurchasePrices)</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<!-- Add New Policy -->
<h4>üÜï Add New Policy</h4>
<div class="form-group">
    <label>Name:</label>
    <input class="form-control" @bind="newPolicyName" />
</div>
<div class="form-group">
    <label>Default Tickets per Round:</label>
    <input class="form-control" type="number" @bind="newDefaultTickets" />
</div>
<div class="form-group">
    <label>Max Purchasable Tickets per Round:</label>
    <input class="form-control" type="number" @bind="newMaxPurchasableTicketsPerRound" />
</div>
<div class="form-group">
    <label>Max Purchasable Tickets per Season (Ignored for Refresh Tickets):</label>
    <input class="form-control" type="number" @bind="newMaxPurchasableTicketsPerSeason" />
</div>

<!-- Set Purchase Prices -->
<h5>üí∞ Set Purchase Prices</h5>
<div class="form-group">
    <label>Initial Price:</label>
    <input class="form-control" type="number" step="0.1" @bind="initialPrice" />
</div>
<div class="form-group">
    <label>Price Increment:</label>
    <input class="form-control" type="number" step="0.1" @bind="priceStep" />
</div>

<!-- Auto-Generate Buttons -->
<button class="btn btn-secondary" @onclick="GenerateBattlePrices">‚öîÔ∏è Auto-Generate Battle Ticket Prices</button>
<button class="btn btn-secondary" @onclick="GenerateRefreshPrices">üîÑ Auto-Generate Refresh Ticket Prices</button>

<!-- Manual Price Input -->
<div class="form-group">
    <label>Purchase Price List:</label>
    <textarea class="form-control" @bind="manualPrices"></textarea>
</div>

<!-- Add Policy Buttons -->
<button class="btn btn-primary" @onclick="AddBattlePolicy">‚öîÔ∏è Add Battle Ticket Policy</button>
<button class="btn btn-success" @onclick="AddRefreshPolicy">üîÑ Add Refresh Ticket Policy</button>

@if (message is not null)
{
    <p class="text-info">@message</p>
}

@code {
    private List<BattleTicketPolicy>? battlePolicies;
    private List<RefreshTicketPolicy>? refreshPolicies;
    private string newPolicyName = "";
    private int newDefaultTickets;
    private int newMaxPurchasableTicketsPerRound;
    private int newMaxPurchasableTicketsPerSeason;
    private string? message;

    private decimal initialPrice = 1.0m;
    private decimal priceStep = 0.1m;
    private string manualPrices = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPolicies();
    }

    private async Task LoadPolicies()
    {
        battlePolicies = await BattlePolicyRepo.GetAllBattlePoliciesAsync();
        refreshPolicies = await RefreshPolicyRepo.GetAllRefreshPoliciesAsync();
    }

    private async Task AddBattlePolicy()
    {
        var prices = ParsePrices();

        if (prices.Count != newMaxPurchasableTicketsPerSeason)
        {
            message = "Battle ticket prices must match the maximum season purchase count.";
            return;
        }

        var policy = new BattleTicketPolicy
        {
            Name = newPolicyName,
            DefaultTicketsPerRound = newDefaultTickets,
            MaxPurchasableTicketsPerRound = newMaxPurchasableTicketsPerRound,
            MaxPurchasableTicketsPerSeason = newMaxPurchasableTicketsPerSeason,
            PurchasePrices = prices
        };

        await BattlePolicyRepo.AddBattlePolicyAsync(policy);
        message = "‚úÖ Battle ticket policy added successfully!";
        await LoadPolicies();
    }

    private async Task AddRefreshPolicy()
    {
        if (newDefaultTickets < 1)
        {
            message = "Refresh tickets must have at least one default ticket.";
            return;
        }

        var prices = ParsePrices();

        if (prices.Count != newMaxPurchasableTicketsPerRound)
        {
            message = "Refresh ticket prices must match the maximum round purchase count.";
            return;
        }

        var policy = new RefreshTicketPolicy
        {
            Name = newPolicyName,
            DefaultTicketsPerRound = newDefaultTickets,
            MaxPurchasableTicketsPerRound = newMaxPurchasableTicketsPerRound,
            PurchasePrices = prices
        };

        await RefreshPolicyRepo.AddRefreshPolicyAsync(policy);
        message = "‚úÖ Refresh ticket policy added successfully!";
        await LoadPolicies();
    }

    private void GenerateBattlePrices()
    {
        var prices = GenerateSequence(newMaxPurchasableTicketsPerSeason, initialPrice, priceStep);
        manualPrices = string.Join(", ", prices);
    }

    private void GenerateRefreshPrices()
    {
        var prices = GenerateSequence(newMaxPurchasableTicketsPerRound, initialPrice, priceStep);
        manualPrices = string.Join(", ", prices);
    }

    private List<decimal> ParsePrices()
    {
        return manualPrices.Split(',')
        .Select(p => decimal.TryParse(p.Trim(), out var result) ? result : (decimal?)null)
        .Where(p => p.HasValue)
        .Select(p => p!.Value)
        .ToList();
    }

    private List<decimal> GenerateSequence(int length, decimal start, decimal step)
    {
        return Enumerable.Range(0, length)
        .Select(i => Math.Round(start + step * i, 1))
        .ToList();
    }
}
