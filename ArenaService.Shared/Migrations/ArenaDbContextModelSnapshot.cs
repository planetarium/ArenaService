// <auto-generated />
using System;
using System.Collections.Generic;
using ArenaService.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArenaService.Migrations
{
    [DbContext(typeof(ArenaDbContext))]
    partial class ArenaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArenaService.Shared.Models.AvailableOpponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("OpponentAvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("opponent_avatar_address");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<int?>("SuccessBattleId")
                        .HasColumnType("integer")
                        .HasColumnName("success_battle_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_available_opponents");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_available_opponents_round_id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_available_opponents_season_id");

                    b.HasIndex("SuccessBattleId")
                        .HasDatabaseName("ix_available_opponents_success_battle_id");

                    b.HasIndex("AvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_available_opponents_avatar_address_season_id");

                    b.HasIndex("OpponentAvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_available_opponents_opponent_avatar_address_season_id");

                    b.ToTable("available_opponents", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Battle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableOpponentId")
                        .HasColumnType("integer")
                        .HasColumnName("available_opponent_id");

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<int>("BattleStatus")
                        .HasColumnType("integer")
                        .HasColumnName("battle_status");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("ExceptionNames")
                        .HasColumnType("text")
                        .HasColumnName("exception_names");

                    b.Property<bool?>("IsVictory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_victory");

                    b.Property<int?>("MyScoreChange")
                        .HasColumnType("integer")
                        .HasColumnName("my_score_change");

                    b.Property<int?>("OpponentScoreChange")
                        .HasColumnType("integer")
                        .HasColumnName("opponent_score_change");

                    b.Property<bool?>("Reviewed")
                        .HasColumnType("boolean")
                        .HasColumnName("reviewed");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("TxId")
                        .HasColumnType("text")
                        .HasColumnName("tx_id");

                    b.Property<int?>("TxStatus")
                        .HasColumnType("integer")
                        .HasColumnName("tx_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_battles");

                    b.HasIndex("AvailableOpponentId")
                        .HasDatabaseName("ix_battles_available_opponent_id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_battles_season_id");

                    b.HasIndex("AvatarAddress", "SeasonId")
                        .HasDatabaseName("ix_battles_avatar_address_season_id");

                    b.ToTable("battles", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.BattleTicket.BattleTicketPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("DefaultTicketsPerRound")
                        .HasColumnType("integer")
                        .HasColumnName("default_tickets_per_round");

                    b.Property<int>("MaxPurchasableTicketsPerRound")
                        .HasColumnType("integer")
                        .HasColumnName("max_purchasable_tickets_per_round");

                    b.Property<int>("MaxPurchasableTicketsPerSeason")
                        .HasColumnType("integer")
                        .HasColumnName("max_purchasable_tickets_per_season");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<decimal>>("PurchasePrices")
                        .IsRequired()
                        .HasColumnType("decimal[]")
                        .HasColumnName("purchase_prices");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_battle_ticket_policies");

                    b.ToTable("battle_ticket_policies", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.BattleTicket.BattleTicketPurchaseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount_paid");

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("ExceptionNames")
                        .HasColumnType("text")
                        .HasColumnName("exception_names");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_count");

                    b.Property<int>("PurchaseStatus")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_status");

                    b.Property<bool?>("Reviewed")
                        .HasColumnType("boolean")
                        .HasColumnName("reviewed");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<string>("TxId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tx_id");

                    b.Property<int?>("TxStatus")
                        .HasColumnType("integer")
                        .HasColumnName("tx_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_battle_ticket_purchase_logs");

                    b.ToTable("battle_ticket_purchase_logs", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.BattleTicket.BattleTicketStatusPerRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<int>("BattleTicketPolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_ticket_policy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("LoseCount")
                        .HasColumnType("integer")
                        .HasColumnName("lose_count");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_count");

                    b.Property<int>("RemainingCount")
                        .HasColumnType("integer")
                        .HasColumnName("remaining_count");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsedCount")
                        .HasColumnType("integer")
                        .HasColumnName("used_count");

                    b.Property<int>("WinCount")
                        .HasColumnType("integer")
                        .HasColumnName("win_count");

                    b.HasKey("Id")
                        .HasName("pk_battle_ticket_statuses_per_round");

                    b.HasIndex("BattleTicketPolicyId")
                        .HasDatabaseName("ix_battle_ticket_statuses_per_round_battle_ticket_policy_id");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_battle_ticket_statuses_per_round_round_id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_battle_ticket_statuses_per_round_season_id");

                    b.HasIndex("AvatarAddress", "SeasonId", "RoundId")
                        .IsUnique()
                        .HasDatabaseName("ix_battle_ticket_statuses_per_round_avatar_address_season_id_r");

                    b.ToTable("battle_ticket_statuses_per_round", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.BattleTicket.BattleTicketStatusPerSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<int>("BattleTicketPolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_ticket_policy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_count");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsedCount")
                        .HasColumnType("integer")
                        .HasColumnName("used_count");

                    b.HasKey("Id")
                        .HasName("pk_battle_ticket_statuses_per_season");

                    b.HasIndex("BattleTicketPolicyId")
                        .HasDatabaseName("ix_battle_ticket_statuses_per_season_battle_ticket_policy_id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_battle_ticket_statuses_per_season_season_id");

                    b.HasIndex("AvatarAddress", "SeasonId")
                        .IsUnique()
                        .HasDatabaseName("ix_battle_ticket_statuses_per_season_avatar_address_season_id");

                    b.ToTable("battle_ticket_statuses_per_season", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.BattleTicket.BattleTicketUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BattleId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_id");

                    b.Property<int>("BattleTicketStatusPerRoundId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_ticket_status_per_round_id");

                    b.Property<int>("BattleTicketStatusPerSeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_ticket_status_per_season_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.HasKey("Id")
                        .HasName("pk_battle_ticket_usage_logs");

                    b.HasIndex("BattleTicketStatusPerRoundId")
                        .HasDatabaseName("ix_battle_ticket_usage_logs_battle_ticket_status_per_round_id");

                    b.HasIndex("BattleTicketStatusPerSeasonId")
                        .HasDatabaseName("ix_battle_ticket_usage_logs_battle_ticket_status_per_season_id");

                    b.ToTable("battle_ticket_usage_logs", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_clans");

                    b.ToTable("clans", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Medal", b =>
                {
                    b.Property<string>("AvatarAddress")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("MedalCount")
                        .HasColumnType("integer")
                        .HasColumnName("medal_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("AvatarAddress", "SeasonId")
                        .HasName("pk_medals");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_medals_season_id");

                    b.HasIndex("MedalCount", "SeasonId")
                        .HasDatabaseName("ix_medals_medal_count_season_id");

                    b.ToTable("medals", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Participant", b =>
                {
                    b.Property<string>("AvatarAddress")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("InitializedScore")
                        .HasColumnType("integer")
                        .HasColumnName("initialized_score");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("TotalLose")
                        .HasColumnType("integer")
                        .HasColumnName("total_lose");

                    b.Property<int>("TotalWin")
                        .HasColumnType("integer")
                        .HasColumnName("total_win");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("AvatarAddress", "SeasonId")
                        .HasName("pk_participants");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_participants_season_id");

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.RankingSnapshot", b =>
                {
                    b.Property<string>("AvatarAddress")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<int?>("ClanId")
                        .HasColumnType("integer")
                        .HasColumnName("clan_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.HasKey("AvatarAddress", "SeasonId", "RoundId")
                        .HasName("pk_ranking_snapshots");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_ranking_snapshots_round_id");

                    b.HasIndex("SeasonId", "RoundId")
                        .HasDatabaseName("ix_ranking_snapshots_season_id_round_id");

                    b.ToTable("ranking_snapshots", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.RefreshTicket.RefreshTicketPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("DefaultTicketsPerRound")
                        .HasColumnType("integer")
                        .HasColumnName("default_tickets_per_round");

                    b.Property<int>("MaxPurchasableTicketsPerRound")
                        .HasColumnType("integer")
                        .HasColumnName("max_purchasable_tickets_per_round");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<decimal>>("PurchasePrices")
                        .IsRequired()
                        .HasColumnType("decimal[]")
                        .HasColumnName("purchase_prices");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_refresh_ticket_policies");

                    b.ToTable("refresh_ticket_policies", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.RefreshTicket.RefreshTicketPurchaseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount_paid");

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("ExceptionNames")
                        .HasColumnType("text")
                        .HasColumnName("exception_names");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_count");

                    b.Property<int>("PurchaseStatus")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_status");

                    b.Property<bool?>("Reviewed")
                        .HasColumnType("boolean")
                        .HasColumnName("reviewed");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<string>("TxId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tx_id");

                    b.Property<int?>("TxStatus")
                        .HasColumnType("integer")
                        .HasColumnName("tx_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_refresh_ticket_purchase_logs");

                    b.ToTable("refresh_ticket_purchase_logs", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.RefreshTicket.RefreshTicketStatusPerRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_count");

                    b.Property<int>("RefreshTicketPolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_ticket_policy_id");

                    b.Property<int>("RemainingCount")
                        .HasColumnType("integer")
                        .HasColumnName("remaining_count");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsedCount")
                        .HasColumnType("integer")
                        .HasColumnName("used_count");

                    b.HasKey("Id")
                        .HasName("pk_refresh_ticket_statuses_per_round");

                    b.HasIndex("RefreshTicketPolicyId")
                        .HasDatabaseName("ix_refresh_ticket_statuses_per_round_refresh_ticket_policy_id");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_refresh_ticket_statuses_per_round_round_id");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_refresh_ticket_statuses_per_round_season_id");

                    b.HasIndex("AvatarAddress", "SeasonId", "RoundId")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_ticket_statuses_per_round_avatar_address_season_id_");

                    b.ToTable("refresh_ticket_statuses_per_round", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.RefreshTicket.RefreshTicketUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("RefreshTicketStatusPerRoundId")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_ticket_status_per_round_id");

                    b.Property<List<int>>("SpecifiedOpponentIds")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("specified_opponent_ids");

                    b.HasKey("Id")
                        .HasName("pk_refresh_ticket_usage_logs");

                    b.HasIndex("RefreshTicketStatusPerRoundId")
                        .HasDatabaseName("ix_refresh_ticket_usage_logs_refresh_ticket_status_per_round_id");

                    b.ToTable("refresh_ticket_usage_logs", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<long>("EndBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("end_block");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<long>("StartBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("start_block");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_rounds");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_rounds_season_id");

                    b.ToTable("rounds", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArenaType")
                        .HasColumnType("integer")
                        .HasColumnName("arena_type");

                    b.Property<int>("BattleTicketPolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("battle_ticket_policy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<long>("EndBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("end_block");

                    b.Property<string>("PrizeDetailUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prize_detail_url");

                    b.Property<int>("RefreshTicketPolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_ticket_policy_id");

                    b.Property<int>("RequiredMedalCount")
                        .HasColumnType("integer")
                        .HasColumnName("required_medal_count");

                    b.Property<int>("RoundInterval")
                        .HasColumnType("integer")
                        .HasColumnName("round_interval");

                    b.Property<int>("SeasonGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("season_group_id");

                    b.Property<long>("StartBlock")
                        .HasColumnType("bigint")
                        .HasColumnName("start_block");

                    b.Property<int>("TotalPrize")
                        .HasColumnType("integer")
                        .HasColumnName("total_prize");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_seasons");

                    b.HasIndex("BattleTicketPolicyId")
                        .HasDatabaseName("ix_seasons_battle_ticket_policy_id");

                    b.HasIndex("RefreshTicketPolicyId")
                        .HasDatabaseName("ix_seasons_refresh_ticket_policy_id");

                    b.HasIndex("StartBlock")
                        .HasDatabaseName("ix_seasons_start_block");

                    b.HasIndex("StartBlock", "EndBlock")
                        .HasDatabaseName("ix_seasons_start_block_end_block");

                    b.ToTable("seasons", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.User", b =>
                {
                    b.Property<string>("AvatarAddress")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("avatar_address");

                    b.Property<string>("AgentAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("agent_address");

                    b.Property<int?>("ClanId")
                        .HasColumnType("integer")
                        .HasColumnName("clan_id");

                    b.Property<long>("Cp")
                        .HasColumnType("bigint")
                        .HasColumnName("cp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("NameWithHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_with_hash");

                    b.Property<int>("PortraitId")
                        .HasColumnType("integer")
                        .HasColumnName("portrait_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("AvatarAddress")
                        .HasName("pk_users");

                    b.HasIndex("ClanId")
                        .HasDatabaseName("ix_users_clan_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ArenaService.Shared.Models.AvailableOpponent", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_rounds_round_id");

                    b.HasOne("ArenaService.Shared.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_seasons_season_id");

                    b.HasOne("ArenaService.Shared.Models.Battle", "SuccessBattle")
                        .WithMany()
                        .HasForeignKey("SuccessBattleId")
                        .HasConstraintName("fk_available_opponents_battles_success_battle_id");

                    b.HasOne("ArenaService.Shared.Models.Participant", "Me")
                        .WithMany("AvailableOpponents")
                        .HasForeignKey("AvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_participants_avatar_address_season_id");

                    b.HasOne("ArenaService.Shared.Models.Participant", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentAvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_available_opponents_participants_opponent_avatar_address_se");

                    b.Navigation("Me");

                    b.Navigation("Opponent");

                    b.Navigation("Round");

                    b.Navigation("Season");

                    b.Navigation("SuccessBattle");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Battle", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.AvailableOpponent", "AvailableOpponent")
                        .WithMany("Battles")
                        .HasForeignKey("AvailableOpponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battles_available_opponents_available_opponent_id");

                    b.HasOne("ArenaService.Shared.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battles_seasons_season_id");

                    b.HasOne("ArenaService.Shared.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("AvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battles_participants_avatar_address_season_id");

                    b.Navigation("AvailableOpponent");

                    b.Navigation("Participant");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.BattleTicket.BattleTicketStatusPerRound", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.BattleTicket.BattleTicketPolicy", "BattleTicketPolicy")
                        .WithMany()
                        .HasForeignKey("BattleTicketPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_ticket_statuses_per_round_battle_ticket_policies_bat");

                    b.HasOne("ArenaService.Shared.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_ticket_statuses_per_round_rounds_round_id");

                    b.HasOne("ArenaService.Shared.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_ticket_statuses_per_round_seasons_season_id");

                    b.HasOne("ArenaService.Shared.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("AvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_ticket_statuses_per_round_participants_avatar_addres");

                    b.Navigation("BattleTicketPolicy");

                    b.Navigation("Participant");

                    b.Navigation("Round");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.BattleTicket.BattleTicketStatusPerSeason", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.BattleTicket.BattleTicketPolicy", "BattleTicketPolicy")
                        .WithMany()
                        .HasForeignKey("BattleTicketPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_ticket_statuses_per_season_battle_ticket_policies_ba");

                    b.HasOne("ArenaService.Shared.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_ticket_statuses_per_season_seasons_season_id");

                    b.HasOne("ArenaService.Shared.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("AvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_ticket_statuses_per_season_participants_avatar_addre");

                    b.Navigation("BattleTicketPolicy");

                    b.Navigation("Participant");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.BattleTicket.BattleTicketUsageLog", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.BattleTicket.BattleTicketStatusPerRound", "BattleTicketStatusPerRound")
                        .WithMany()
                        .HasForeignKey("BattleTicketStatusPerRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_ticket_usage_logs_battle_ticket_statuses_per_round_b");

                    b.HasOne("ArenaService.Shared.Models.BattleTicket.BattleTicketStatusPerSeason", "BattleTicketStatusPerSeason")
                        .WithMany()
                        .HasForeignKey("BattleTicketStatusPerSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_battle_ticket_usage_logs_battle_ticket_statuses_per_season_");

                    b.Navigation("BattleTicketStatusPerRound");

                    b.Navigation("BattleTicketStatusPerSeason");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Medal", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AvatarAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medals_users_avatar_address");

                    b.HasOne("ArenaService.Shared.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medals_seasons_season_id");

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Participant", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AvatarAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participants_users_avatar_address");

                    b.HasOne("ArenaService.Shared.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participants_seasons_season_id");

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.RankingSnapshot", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ranking_snapshots_rounds_round_id");

                    b.HasOne("ArenaService.Shared.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ranking_snapshots_seasons_season_id");

                    b.HasOne("ArenaService.Shared.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("AvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ranking_snapshots_participants_avatar_address_season_id");

                    b.Navigation("Participant");

                    b.Navigation("Round");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.RefreshTicket.RefreshTicketStatusPerRound", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.RefreshTicket.RefreshTicketPolicy", "RefreshTicketPolicy")
                        .WithMany()
                        .HasForeignKey("RefreshTicketPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_ticket_statuses_per_round_refresh_ticket_policies_r");

                    b.HasOne("ArenaService.Shared.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_ticket_statuses_per_round_rounds_round_id");

                    b.HasOne("ArenaService.Shared.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_ticket_statuses_per_round_seasons_season_id");

                    b.HasOne("ArenaService.Shared.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("AvatarAddress", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_ticket_statuses_per_round_participants_avatar_addre");

                    b.Navigation("Participant");

                    b.Navigation("RefreshTicketPolicy");

                    b.Navigation("Round");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.RefreshTicket.RefreshTicketUsageLog", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.RefreshTicket.RefreshTicketStatusPerRound", "RefreshTicketStatusPerRound")
                        .WithMany()
                        .HasForeignKey("RefreshTicketStatusPerRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_ticket_usage_logs_refresh_ticket_statuses_per_round");

                    b.Navigation("RefreshTicketStatusPerRound");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Round", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.Season", "Season")
                        .WithMany("Rounds")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rounds_seasons_season_id");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Season", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.BattleTicket.BattleTicketPolicy", "BattleTicketPolicy")
                        .WithMany()
                        .HasForeignKey("BattleTicketPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seasons_battle_ticket_policies_battle_ticket_policy_id");

                    b.HasOne("ArenaService.Shared.Models.RefreshTicket.RefreshTicketPolicy", "RefreshTicketPolicy")
                        .WithMany()
                        .HasForeignKey("RefreshTicketPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seasons_refresh_ticket_policies_refresh_ticket_policy_id");

                    b.Navigation("BattleTicketPolicy");

                    b.Navigation("RefreshTicketPolicy");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.User", b =>
                {
                    b.HasOne("ArenaService.Shared.Models.Clan", "Clan")
                        .WithMany("Users")
                        .HasForeignKey("ClanId")
                        .HasConstraintName("fk_users_clans_clan_id");

                    b.Navigation("Clan");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.AvailableOpponent", b =>
                {
                    b.Navigation("Battles");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Clan", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Participant", b =>
                {
                    b.Navigation("AvailableOpponents");
                });

            modelBuilder.Entity("ArenaService.Shared.Models.Season", b =>
                {
                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
